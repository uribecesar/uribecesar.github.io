<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="es"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://uribecesar.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://uribecesar.github.io/" rel="alternate" type="text/html" hreflang="es"/><updated>2023-11-26T05:33:04+00:00</updated><id>https://uribecesar.github.io/feed.xml</id><title type="html">blank</title><subtitle>Ingeniero de Sistemas y consultor TI. Desarrollado de software a medida, optimización de infraestructura tecnológica y entusiasta de la IA. </subtitle><entry><title type="html">GDScript - Optimización del Control de Personaje en FPS</title><link href="https://uribecesar.github.io/blog/2023/gdscript-fps/" rel="alternate" type="text/html" title="GDScript - Optimización del Control de Personaje en FPS"/><published>2023-11-24T07:12:00+00:00</published><updated>2023-11-24T07:12:00+00:00</updated><id>https://uribecesar.github.io/blog/2023/gdscript-fps</id><content type="html" xml:base="https://uribecesar.github.io/blog/2023/gdscript-fps/"><![CDATA[<p><a href="https://opensource.org/licenses/MIT"><img src="https://img.shields.io/badge/license-MIT-green.svg" alt="License"/></a> <a href="https://godotengine.org/"><img src="https://img.shields.io/badge/godot-4.1%2B-blue.svg" alt="Godot Engine"/></a> <a href="https://github.com/tuusuario/tuproyecto/releases/tag/v1.0.0"><img src="https://img.shields.io/badge/version-v1.0.0-orange.svg" alt="Version"/></a></p> <p>Control de personaje para juegos en primera persona (FPS) desarrollado en Godot Engine. Este código proporciona una implementación optimizada para gestionar el movimiento y las interacciones del personaje.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/godot_1-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/godot_1-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/godot_1-1400.webp"/> <img src="/assets/img/godot_1.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <hr/> <h3 id="características-principales">Características Principales</h3> <ul> <li>Transiciones suaves entre estados de movimiento (caminar, correr, agacharse).</li> <li>Dinámico sistema de deslizamiento para experiencias de juego emocionantes.</li> <li>Efectos visuales realistas, como el balanceo de cabeza durante acciones específicas.</li> <li>Interacción fluida del personaje con el entorno mediante detección de colisiones y rayos.</li> </ul> <hr/> <h3 id="instrucciones-de-uso">Instrucciones de Uso</h3> <ol> <li><strong>Integración en Proyectos:</strong> <ul> <li>Incorpora el código fuente en tu proyecto Godot Engine.</li> <li>No olvides ajustar los valores de movimiento en el mapa de entradas (<code class="language-plaintext highlighter-rouge">input map</code>) según tus necesidades.</li> </ul> </li> </ol> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/godot_2-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/godot_2-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/godot_2-1400.webp"/> <img src="/assets/img/godot_2.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <ol> <li><strong>Resolución de Problemas:</strong> <ul> <li>Al ejecutar la escena, verifica las rutas de dependencias para asegurar la correcta vinculación de recursos.</li> </ul> <figure> </figure> </li> </ol> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/godot_3-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/godot_3-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/godot_3-1400.webp"/> <img src="/assets/img/godot_3.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <p>&lt;/figure&gt;</p> <hr/> <h3 id="descarga">Descarga</h3> <p>Como contribución práctica a la comunidad este es el codigo y el enlace a al respositorio en <a href="https://github.com/uribecesar/fps-godot-simple">github</a></p> <div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">extends</span> <span class="n">CharacterBody3D</span>

<span class="c1">#PLAYER NODES</span>
<span class="c1">#"left", "right", "forward", "backward", "freelook","crouch","jump"</span>
<span class="err">@</span><span class="k">onready</span> <span class="k">var</span> <span class="n">eyes</span> <span class="o">=</span> <span class="o">$</span><span class="n">nek</span><span class="o">/</span><span class="n">head</span><span class="o">/</span><span class="n">eyes</span>
<span class="err">@</span><span class="k">onready</span> <span class="k">var</span> <span class="n">camera_3d</span> <span class="o">=</span> <span class="o">$</span><span class="n">nek</span><span class="o">/</span><span class="n">head</span><span class="o">/</span><span class="n">eyes</span><span class="o">/</span><span class="n">Camera3D</span>
<span class="err">@</span><span class="k">onready</span> <span class="k">var</span> <span class="n">nek</span> <span class="o">=</span> <span class="o">$</span><span class="n">nek</span>

<span class="err">@</span><span class="k">onready</span> <span class="k">var</span> <span class="n">head</span> <span class="o">=</span> <span class="o">$</span><span class="n">nek</span><span class="o">/</span><span class="n">head</span>
<span class="err">@</span><span class="k">onready</span> <span class="k">var</span> <span class="n">standing_collision_shape</span> <span class="o">=</span> <span class="o">$</span><span class="n">StandingCollisionShape</span>
<span class="err">@</span><span class="k">onready</span> <span class="k">var</span> <span class="n">crouching_collision_shape</span> <span class="o">=</span> <span class="o">$</span><span class="n">CrouchingCollisionShape</span>
<span class="err">@</span><span class="k">onready</span> <span class="k">var</span> <span class="n">ray_cast_3d</span> <span class="o">=</span> <span class="o">$</span><span class="n">RayCast3D</span>

<span class="c1">#SPEED VARIRABLES</span>

<span class="err">@</span><span class="k">export</span> <span class="k">var</span> <span class="n">walking_speed</span> <span class="o">=</span> <span class="mf">5.0</span>
<span class="err">@</span><span class="k">export</span> <span class="k">var</span> <span class="n">sprinting_speed</span> <span class="o">=</span> <span class="mf">8.0</span>
<span class="err">@</span><span class="k">export</span> <span class="k">var</span> <span class="n">crouching_speed</span> <span class="o">=</span> <span class="mf">3.0</span>
<span class="err">@</span><span class="k">export</span> <span class="k">var</span> <span class="n">gravity</span> <span class="o">=</span> <span class="mf">10.0</span>
<span class="err">@</span><span class="k">export</span> <span class="k">var</span> <span class="n">booleantest</span> <span class="o">=</span> <span class="bp">false</span>
<span class="err">@</span><span class="k">export</span> <span class="k">var</span> <span class="n">stringTest</span> <span class="o">=</span> <span class="s2">"String1"</span>
<span class="err">@</span><span class="k">export</span> <span class="k">var</span> <span class="n">integerTest</span> <span class="o">=</span> <span class="mi">10</span>

<span class="k">var</span> <span class="n">current_speed</span> <span class="o">=</span> <span class="n">walking_speed</span>

<span class="c1">#STATES</span>
<span class="k">var</span> <span class="n">walking</span> <span class="o">=</span> <span class="bp">false</span>
<span class="k">var</span> <span class="n">sprinting</span> <span class="o">=</span> <span class="bp">false</span>
<span class="k">var</span> <span class="n">crouching</span> <span class="o">=</span> <span class="bp">false</span>
<span class="k">var</span> <span class="n">free_looking</span> <span class="o">=</span> <span class="bp">false</span>
<span class="k">var</span> <span class="n">sliding</span> <span class="o">=</span> <span class="bp">false</span>

<span class="c1">#SLIDE VARS</span>

<span class="k">var</span> <span class="n">slide_timer</span> <span class="o">=</span> <span class="mf">0.0</span>
<span class="k">var</span> <span class="n">slide_timer_max</span><span class="o">=</span> <span class="mf">1.0</span>
<span class="k">var</span> <span class="n">slide_vector</span><span class="o">=</span> <span class="kt">Vector2</span><span class="o">.</span><span class="n">ZERO</span>
<span class="err">@</span><span class="k">export</span> <span class="k">var</span> <span class="n">slide_speed</span><span class="o">=</span><span class="mf">10.0</span>

<span class="c1">#HEAD bobbing vars</span>

<span class="k">const</span> <span class="n">head_bobbing_sprint_speed</span> <span class="o">=</span> <span class="mf">22.0</span>
<span class="k">const</span> <span class="n">head_bobbing_walking_speed</span> <span class="o">=</span> <span class="mf">14.0</span>
<span class="k">const</span> <span class="n">head_bobbing_crouching_speed</span> <span class="o">=</span>  <span class="mf">10.0</span>

<span class="k">const</span> <span class="n">head_bobbing_sprint_intensity</span> <span class="o">=</span> <span class="mf">0.2</span>
<span class="k">const</span> <span class="n">head_bobbing_walking_intensity</span> <span class="o">=</span> <span class="mf">0.1</span>
<span class="k">const</span> <span class="n">head_bobbing_crouching_intensity</span> <span class="o">=</span> <span class="mf">0.05</span>

<span class="k">var</span> <span class="n">head_bobbing_vector</span> <span class="o">=</span> <span class="kt">Vector2</span><span class="o">.</span><span class="n">ZERO</span>
<span class="k">var</span> <span class="n">head_bobbing_index</span> <span class="o">=</span> <span class="mf">0.0</span>
<span class="k">var</span> <span class="n">head_bobbing_current_intesity</span> <span class="o">=</span> <span class="mf">0.0</span>

<span class="c1">#MOVEMENT VARS </span>
<span class="c1">#var for incrementally reach intended speed, set to 0 for snappy movement</span>
<span class="err">@</span><span class="k">export</span> <span class="k">var</span> <span class="n">lerp_speed</span> <span class="o">=</span> <span class="mf">10.0</span>

<span class="err">@</span><span class="k">export</span> <span class="k">var</span> <span class="n">jump_velocity</span> <span class="o">=</span> <span class="mf">4.5</span>

<span class="k">var</span> <span class="n">crouching_depth</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.5</span> <span class="c1">#Ctodo: fix this</span>

<span class="k">var</span> <span class="n">tilt_amount_freelook</span> <span class="o">=</span> <span class="mi">8</span>

<span class="err">@</span><span class="k">export</span> <span class="k">var</span> <span class="n">air_lerp_speed</span> <span class="o">=</span> <span class="mf">3.0</span>

<span class="c1">#INPUT VARS</span>
<span class="k">var</span> <span class="n">direction</span> <span class="o">=</span> <span class="kt">Vector3</span><span class="o">.</span><span class="n">ZERO</span>
<span class="err">@</span><span class="k">export</span> <span class="k">var</span> <span class="n">mouse_sens</span> <span class="o">=</span> <span class="mf">0.1</span>




<span class="c1"># Get the gravity from the project settings to be synced with RigidBody nodes.</span>


<span class="k">func</span> <span class="nf">_ready</span><span class="p">():</span>
	<span class="n">Input</span><span class="o">.</span><span class="n">set_mouse_mode</span><span class="p">(</span><span class="n">Input</span><span class="o">.</span><span class="n">MOUSE_MODE_CAPTURED</span><span class="p">)</span>


<span class="k">func</span> <span class="nf">_input</span><span class="p">(</span><span class="n">event</span><span class="p">):</span>
	<span class="c1">#gives action to mouse movement</span>
	<span class="k">if</span> <span class="n">event</span> <span class="k">is</span> <span class="n">InputEventMouseMotion</span><span class="p">:</span>
		<span class="k">if</span> <span class="n">free_looking</span><span class="p">:</span>
			<span class="n">nek</span><span class="o">.</span><span class="n">rotate_y</span><span class="p">(</span><span class="n">deg_to_rad</span><span class="p">(</span><span class="o">-</span><span class="n">event</span><span class="o">.</span><span class="n">relative</span><span class="o">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">mouse_sens</span><span class="p">))</span>
			<span class="n">nek</span><span class="o">.</span><span class="n">rotation</span><span class="o">.</span><span class="n">y</span><span class="o">=</span><span class="nb">clamp</span><span class="p">(</span><span class="n">nek</span><span class="o">.</span><span class="n">rotation</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">deg_to_rad</span><span class="p">(</span><span class="o">-</span><span class="mi">120</span><span class="p">),</span> <span class="n">deg_to_rad</span><span class="p">(</span><span class="mi">120</span><span class="p">))</span>
		<span class="k">else</span><span class="p">:</span>
			<span class="n">rotate_y</span><span class="p">(</span><span class="n">deg_to_rad</span><span class="p">(</span><span class="o">-</span><span class="n">event</span><span class="o">.</span><span class="n">relative</span><span class="o">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">mouse_sens</span><span class="p">))</span>
		<span class="n">head</span><span class="o">.</span><span class="n">rotate_x</span><span class="p">(</span><span class="n">deg_to_rad</span><span class="p">(</span><span class="o">-</span><span class="n">event</span><span class="o">.</span><span class="n">relative</span><span class="o">.</span><span class="n">y</span> <span class="o">*</span> <span class="n">mouse_sens</span><span class="p">))</span>
		<span class="c1">#restricts head rotation</span>
		<span class="n">head</span><span class="o">.</span><span class="n">rotation</span><span class="o">.</span><span class="n">x</span><span class="o">=</span><span class="nb">clamp</span><span class="p">(</span><span class="n">head</span><span class="o">.</span><span class="n">rotation</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">deg_to_rad</span><span class="p">(</span><span class="o">-</span><span class="mi">89</span><span class="p">),</span> <span class="n">deg_to_rad</span><span class="p">(</span><span class="mi">89</span><span class="p">))</span>
		

		
<span class="c1">#HANDLE MOVEMENT	</span>
<span class="k">func</span> <span class="nf">_physics_process</span><span class="p">(</span><span class="n">delta</span><span class="p">):</span>
	<span class="c1">#getting movement input</span>
	<span class="k">var</span> <span class="n">input_dir</span> <span class="o">=</span> <span class="n">Input</span><span class="o">.</span><span class="n">get_vector</span><span class="p">(</span><span class="s2">"left"</span><span class="p">,</span> <span class="s2">"right"</span><span class="p">,</span> <span class="s2">"forward"</span><span class="p">,</span> <span class="s2">"backward"</span><span class="p">)</span>
	
	<span class="c1">#movement states</span>
	
	<span class="c1">#crouching</span>
	
	<span class="k">if</span>  <span class="n">Input</span><span class="o">.</span><span class="n">is_action_pressed</span><span class="p">(</span><span class="s2">"crouch"</span><span class="p">)</span> <span class="o">||</span> <span class="n">sliding</span><span class="p">:</span>
		
		<span class="n">current_speed</span> <span class="o">=</span> <span class="nb">lerp</span><span class="p">(</span><span class="n">current_speed</span><span class="p">,</span> <span class="n">crouching_speed</span><span class="p">,</span> <span class="n">delta</span><span class="o">*</span><span class="n">lerp_speed</span><span class="p">)</span>
		<span class="n">head</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="nb">lerp</span><span class="p">(</span><span class="n">head</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span><span class="n">crouching_depth</span><span class="p">,</span> <span class="n">delta</span><span class="o">*</span><span class="n">lerp_speed</span><span class="p">)</span>
		
		<span class="n">standing_collision_shape</span><span class="o">.</span><span class="n">disabled</span><span class="o">=</span><span class="bp">true</span>
		<span class="n">crouching_collision_shape</span><span class="o">.</span><span class="n">disabled</span><span class="o">=</span><span class="bp">false</span>
		
		<span class="c1">#Slide Begin Logic</span>
		
		<span class="k">if</span> <span class="n">sprinting</span> <span class="o">&amp;&amp;</span> <span class="n">input_dir</span> <span class="o">!=</span> <span class="kt">Vector2</span><span class="o">.</span><span class="n">ZERO</span><span class="p">:</span>
			<span class="n">sliding</span><span class="o">=</span><span class="bp">true</span>
			<span class="n">slide_timer</span> <span class="o">=</span> <span class="n">slide_timer_max</span>
			<span class="n">slide_vector</span> <span class="o">=</span> <span class="n">input_dir</span>
			<span class="n">free_looking</span><span class="o">=</span><span class="bp">true</span>
			<span class="nb">print</span><span class="p">(</span><span class="s2">"slide beging"</span><span class="p">)</span>
		
		<span class="n">walking</span> <span class="o">=</span> <span class="bp">false</span>
		<span class="n">sprinting</span> <span class="o">=</span> <span class="bp">false</span>
		<span class="n">crouching</span> <span class="o">=</span> <span class="bp">true</span>
	
	<span class="k">elif</span> <span class="o">!</span><span class="n">ray_cast_3d</span><span class="o">.</span><span class="n">is_colliding</span><span class="p">():</span>
		
		<span class="c1">#STANDING</span>
		
		<span class="n">standing_collision_shape</span><span class="o">.</span><span class="n">disabled</span> <span class="o">=</span> <span class="bp">false</span>
		<span class="n">crouching_collision_shape</span><span class="o">.</span><span class="n">disabled</span> <span class="o">=</span> <span class="bp">true</span>
		
		<span class="n">head</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="nb">lerp</span><span class="p">(</span><span class="n">head</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">delta</span><span class="o">*</span><span class="n">lerp_speed</span><span class="p">)</span>
		
		<span class="k">if</span> <span class="n">Input</span><span class="o">.</span><span class="n">is_action_pressed</span><span class="p">(</span><span class="s2">"sprint"</span><span class="p">):</span>
			<span class="c1">#sprinting</span>
			<span class="n">current_speed</span> <span class="o">=</span> <span class="nb">lerp</span><span class="p">(</span><span class="n">current_speed</span><span class="p">,</span> <span class="n">sprinting_speed</span><span class="p">,</span> <span class="n">delta</span><span class="o">*</span><span class="n">lerp_speed</span><span class="p">)</span>
			
			<span class="n">walking</span> <span class="o">=</span> <span class="bp">false</span>
			<span class="n">sprinting</span> <span class="o">=</span> <span class="bp">true</span>
			<span class="n">crouching</span> <span class="o">=</span> <span class="bp">false</span>
		<span class="k">else</span><span class="p">:</span>
			<span class="c1">#walking</span>
			<span class="n">current_speed</span><span class="o">=</span><span class="nb">lerp</span><span class="p">(</span><span class="n">current_speed</span><span class="p">,</span> <span class="n">walking_speed</span> <span class="p">,</span> <span class="n">delta</span><span class="o">*</span><span class="n">lerp_speed</span><span class="p">)</span>
			
			<span class="n">walking</span> <span class="o">=</span> <span class="bp">true</span>
			<span class="n">sprinting</span> <span class="o">=</span> <span class="bp">false</span>
			<span class="n">crouching</span> <span class="o">=</span> <span class="bp">false</span>
			
			
	<span class="c1">#HANDLE FREE LOOKING</span>
	<span class="k">if</span> <span class="n">Input</span><span class="o">.</span><span class="n">is_action_pressed</span><span class="p">(</span><span class="s2">"freelook"</span><span class="p">)</span> <span class="o">||</span> <span class="n">sliding</span><span class="p">:</span>
		<span class="n">free_looking</span><span class="o">=</span><span class="bp">true</span>
		
		<span class="k">if</span> <span class="n">sliding</span><span class="p">:</span>
			<span class="n">camera_3d</span><span class="o">.</span><span class="n">rotation</span><span class="o">.</span><span class="n">z</span> <span class="o">=</span> <span class="nb">lerp</span><span class="p">(</span><span class="n">camera_3d</span><span class="o">.</span><span class="n">rotation</span><span class="o">.</span><span class="n">z</span><span class="p">,</span><span class="o">-</span><span class="n">deg_to_rad</span><span class="p">(</span><span class="mf">7.0</span><span class="p">),</span><span class="n">delta</span><span class="o">*</span><span class="n">lerp_speed</span><span class="p">)</span>
		<span class="k">else</span><span class="p">:</span>
			<span class="n">camera_3d</span><span class="o">.</span><span class="n">rotation</span><span class="o">.</span><span class="n">z</span> <span class="o">=</span> <span class="o">-</span><span class="n">deg_to_rad</span><span class="p">(</span><span class="n">nek</span><span class="o">.</span><span class="n">rotation</span><span class="o">.</span><span class="n">y</span><span class="o">*</span><span class="n">tilt_amount_freelook</span><span class="p">)</span>
	<span class="k">else</span><span class="p">:</span>
		<span class="n">free_looking</span><span class="o">=</span><span class="bp">false</span>
		<span class="n">nek</span><span class="o">.</span><span class="n">rotation</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="nb">lerp</span><span class="p">(</span><span class="n">nek</span><span class="o">.</span><span class="n">rotation</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">delta</span><span class="o">*</span><span class="n">lerp_speed</span><span class="p">)</span>
		<span class="n">camera_3d</span><span class="o">.</span><span class="n">rotation</span><span class="o">.</span><span class="n">z</span> <span class="o">=</span> <span class="nb">lerp</span><span class="p">(</span><span class="n">camera_3d</span><span class="o">.</span><span class="n">rotation</span><span class="o">.</span><span class="n">z</span><span class="p">,</span><span class="mf">0.0</span><span class="p">,</span><span class="n">delta</span><span class="o">*</span><span class="n">lerp_speed</span><span class="p">)</span>
		
	<span class="c1">#HANDLE SLIDING</span>
		
	<span class="k">if</span> <span class="n">sliding</span><span class="p">:</span>
		<span class="n">slide_timer</span> <span class="o">-=</span><span class="n">delta</span>
		<span class="k">if</span> <span class="n">slide_timer</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
			<span class="n">sliding</span><span class="o">=</span><span class="bp">false</span>
			<span class="nb">print</span><span class="p">(</span><span class="s2">"SLIDE END"</span><span class="p">)</span>
			<span class="n">free_looking</span><span class="o">=</span><span class="bp">false</span>
			
	<span class="c1">#HANDLE HEADBOB</span>
	<span class="k">if</span> <span class="n">sprinting</span><span class="p">:</span>
		<span class="n">head_bobbing_current_intesity</span> <span class="o">=</span> <span class="n">head_bobbing_sprint_intensity</span>
		<span class="n">head_bobbing_index</span> <span class="o">+=</span> <span class="n">head_bobbing_sprint_speed</span><span class="o">*</span><span class="n">delta</span>
	<span class="k">elif</span> <span class="n">walking</span><span class="p">:</span>
		<span class="n">head_bobbing_current_intesity</span> <span class="o">=</span> <span class="n">head_bobbing_walking_intensity</span>
		<span class="n">head_bobbing_index</span> <span class="o">+=</span> <span class="n">head_bobbing_walking_speed</span><span class="o">*</span><span class="n">delta</span>
	<span class="k">elif</span> <span class="n">crouching</span><span class="p">:</span>
		<span class="n">head_bobbing_current_intesity</span> <span class="o">=</span> <span class="n">head_bobbing_crouching_intensity</span>
		<span class="n">head_bobbing_index</span> <span class="o">+=</span> <span class="n">head_bobbing_crouching_speed</span><span class="o">*</span><span class="n">delta</span>
		
	<span class="k">if</span> <span class="n">is_on_floor</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">sliding</span> <span class="o">&amp;&amp;</span> <span class="n">input_dir</span> <span class="o">!=</span> <span class="kt">Vector2</span><span class="o">.</span><span class="n">ZERO</span><span class="p">:</span>
		<span class="n">head_bobbing_vector</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="nb">sin</span><span class="p">(</span><span class="n">head_bobbing_index</span><span class="p">)</span>
		<span class="n">head_bobbing_vector</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="nb">sin</span><span class="p">(</span><span class="n">head_bobbing_index</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="mf">0.5</span>
		
		<span class="n">eyes</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="nb">lerp</span><span class="p">(</span><span class="n">eyes</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">head_bobbing_vector</span><span class="o">.</span><span class="n">y</span><span class="o">*</span><span class="p">(</span><span class="n">head_bobbing_current_intesity</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span> <span class="n">delta</span><span class="o">*</span><span class="n">lerp_speed</span><span class="p">)</span> 	
		<span class="n">eyes</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="nb">lerp</span><span class="p">(</span><span class="n">eyes</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">head_bobbing_vector</span><span class="o">.</span><span class="n">x</span><span class="o">*</span><span class="p">(</span><span class="n">head_bobbing_current_intesity</span><span class="p">),</span> <span class="n">delta</span><span class="o">*</span><span class="n">lerp_speed</span><span class="p">)</span>
	<span class="k">else</span><span class="p">:</span>
		<span class="n">eyes</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="nb">lerp</span><span class="p">(</span><span class="n">eyes</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">delta</span><span class="o">*</span><span class="n">lerp_speed</span><span class="p">)</span> 	
		<span class="n">eyes</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="nb">lerp</span><span class="p">(</span><span class="n">eyes</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">delta</span><span class="o">*</span><span class="n">lerp_speed</span><span class="p">)</span>
		
	<span class="c1"># Add the gravity.</span>
	<span class="k">if</span> <span class="ow">not</span> <span class="n">is_on_floor</span><span class="p">():</span>
		<span class="n">velocity</span><span class="o">.</span><span class="n">y</span> <span class="o">-=</span> <span class="n">gravity</span> <span class="o">*</span> <span class="n">delta</span>

	<span class="c1"># Handle Jump.</span>
	<span class="k">if</span> <span class="n">Input</span><span class="o">.</span><span class="n">is_action_just_pressed</span><span class="p">(</span><span class="s2">"jump"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">is_on_floor</span><span class="p">():</span>
		<span class="n">velocity</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">jump_velocity</span>
		<span class="n">sliding</span> <span class="o">=</span> <span class="bp">false</span>

	<span class="c1"># Get the input direction and handle the movement/deceleration.</span>
	<span class="c1"># As good practice, you should replace UI actions with custom gameplay actions.</span>
	<span class="k">if</span> <span class="n">is_on_floor</span><span class="p">():</span>
		<span class="n">direction</span> <span class="o">=</span> <span class="nb">lerp</span><span class="p">(</span><span class="n">direction</span><span class="p">,</span> <span class="p">(</span><span class="n">transform</span><span class="o">.</span><span class="n">basis</span> <span class="o">*</span> <span class="kt">Vector3</span><span class="p">(</span><span class="n">input_dir</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">input_dir</span><span class="o">.</span><span class="n">y</span><span class="p">))</span><span class="o">.</span><span class="n">normalized</span><span class="p">(),</span> <span class="n">delta</span><span class="o">*</span><span class="n">lerp_speed</span><span class="p">)</span>
	<span class="k">else</span><span class="p">:</span>
		<span class="k">if</span> <span class="n">input_dir</span> <span class="o">!=</span> <span class="kt">Vector2</span><span class="o">.</span><span class="n">ZERO</span><span class="p">:</span>
			<span class="n">direction</span> <span class="o">=</span> <span class="nb">lerp</span><span class="p">(</span><span class="n">direction</span><span class="p">,</span> <span class="p">(</span><span class="n">transform</span><span class="o">.</span><span class="n">basis</span> <span class="o">*</span> <span class="kt">Vector3</span><span class="p">(</span><span class="n">input_dir</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">input_dir</span><span class="o">.</span><span class="n">y</span><span class="p">))</span><span class="o">.</span><span class="n">normalized</span><span class="p">(),</span> <span class="n">delta</span><span class="o">*</span><span class="n">air_lerp_speed</span><span class="p">)</span>

	<span class="k">if</span> <span class="n">sliding</span><span class="p">:</span>
		<span class="n">direction</span> <span class="o">=</span> <span class="p">(</span><span class="n">transform</span><span class="o">.</span><span class="n">basis</span> <span class="o">*</span> <span class="kt">Vector3</span><span class="p">(</span><span class="n">slide_vector</span><span class="o">.</span><span class="n">x</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">slide_vector</span><span class="o">.</span><span class="n">y</span><span class="p">))</span><span class="o">.</span><span class="n">normalized</span><span class="p">()</span>
		<span class="n">current_speed</span><span class="o">=</span> <span class="p">(</span><span class="n">slide_timer</span><span class="o">+</span><span class="mf">0.1</span><span class="p">)</span> <span class="o">*</span> <span class="n">slide_speed</span>

	<span class="k">if</span> <span class="n">direction</span><span class="p">:</span>
		<span class="n">velocity</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">direction</span><span class="o">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">current_speed</span>
		<span class="n">velocity</span><span class="o">.</span><span class="n">z</span> <span class="o">=</span> <span class="n">direction</span><span class="o">.</span><span class="n">z</span> <span class="o">*</span> <span class="n">current_speed</span>
		

	<span class="k">else</span><span class="p">:</span>
		<span class="n">velocity</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">move_toward</span><span class="p">(</span><span class="n">velocity</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">current_speed</span><span class="p">)</span>
		<span class="n">velocity</span><span class="o">.</span><span class="n">z</span> <span class="o">=</span> <span class="n">move_toward</span><span class="p">(</span><span class="n">velocity</span><span class="o">.</span><span class="n">z</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">current_speed</span><span class="p">)</span>

	<span class="n">move_and_slide</span><span class="p">()</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="General"/><category term="programacion"/><category term="godot"/><category term="gdscript"/><category term="gamedev"/><summary type="html"><![CDATA[Codigo fuente para el control de personaje dinamico en Godot]]></summary></entry><entry><title type="html">Programación con chatgpt y la representación Gráfica de Datos Textuales con Python</title><link href="https://uribecesar.github.io/blog/2023/programacion-chatgpt/" rel="alternate" type="text/html" title="Programación con chatgpt y la representación Gráfica de Datos Textuales con Python"/><published>2023-07-21T11:23:00+00:00</published><updated>2023-07-21T11:23:00+00:00</updated><id>https://uribecesar.github.io/blog/2023/programacion-chatgpt</id><content type="html" xml:base="https://uribecesar.github.io/blog/2023/programacion-chatgpt/"><![CDATA[<p><img src="https://img.shields.io/badge/Python-3.8%2B-blue" alt="Python"/> <img src="https://img.shields.io/badge/Dependencies-Networkx%2C%20Asciinet%2C%20PySimpleGUI-brightgreen" alt="Dependencies"/> <img src="https://img.shields.io/badge/Powered%20by-ChatGPT-blueviolet" alt="Powered by ChatGPT"/> <img src="https://img.shields.io/badge/License-MIT-green" alt="License"/> <img src="https://img.shields.io/badge/Project%20Status-Completed-brightgreen" alt="Project Status"/></p> <p>Durante una presentación reciente utilizando Marp, me encontré con desafíos al intentar crear gráficos con Mermaid. Opté por explicar los conceptos con gráficos ASCII utilizando asciiflow, pero esta solución mostró ser ineficiente para representaciones simples y rápidas. Con el objetivo de abordar esta problemática, con los prompts correctos ChatGPT fue capaz de desarrollar una solución en Python utilizando las bibliotecas networkx, asciinet y PySimpleGUI.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="n">networkx</span> <span class="k">as</span> <span class="n">nx</span>
<span class="kn">import</span> <span class="n">pyperclip</span>
<span class="kn">from</span> <span class="n">asciinet</span> <span class="kn">import</span> <span class="n">graph_to_ascii</span>
<span class="kn">import</span> <span class="n">PySimpleGUI</span> <span class="k">as</span> <span class="n">sg</span>

<span class="c1"># Función para generar el grafo y arte ASCII
</span><span class="k">def</span> <span class="nf">generar_grafo_y_ascii</span><span class="p">(</span><span class="n">texto_largo</span><span class="p">,</span> <span class="n">relaciones</span><span class="p">):</span>
    <span class="c1"># Dividir el texto en palabras y ordenarlas
</span>    <span class="n">lista_datos</span> <span class="o">=</span> <span class="n">texto_largo</span><span class="p">.</span><span class="nf">split</span><span class="p">()</span>

    <span class="c1"># Convertir la cadena de texto en una lista de conexiones numeradas
</span>    <span class="n">conexiones_numero</span> <span class="o">=</span> <span class="p">[</span><span class="nf">tuple</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">rel</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">-</span><span class="sh">"</span><span class="p">)))</span> <span class="k">for</span> <span class="n">rel</span> <span class="ow">in</span> <span class="n">relaciones</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">)]</span>

    <span class="c1"># Crear un grafo
</span>    <span class="n">G</span> <span class="o">=</span> <span class="n">nx</span><span class="p">.</span><span class="nc">Graph</span><span class="p">()</span>

    <span class="c1"># Agregar las conexiones basadas en los índices a partir de la lista de datos
</span>    <span class="k">for</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">conexiones_numero</span><span class="p">:</span>
        <span class="n">G</span><span class="p">.</span><span class="nf">add_edge</span><span class="p">(</span><span class="n">lista_datos</span><span class="p">[</span><span class="n">u</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">lista_datos</span><span class="p">[</span><span class="n">v</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span>

    <span class="c1"># Obtener el arte ASCII del grafo utilizando la función graph_to_ascii
</span>    <span class="n">ascii_art</span> <span class="o">=</span> <span class="nf">graph_to_ascii</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>

    <span class="c1"># Diccionario de reemplazos
</span>    <span class="n">reemplazos</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">─</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">─</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">┌</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">┌</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">└</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">└</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">┐</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">┐</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">┘</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">┘</span><span class="sh">"</span>
    <span class="p">}</span>

    <span class="c1"># Aplicar los reemplazos utilizando un bucle
</span>    <span class="k">for</span> <span class="n">original</span><span class="p">,</span> <span class="n">nuevo</span> <span class="ow">in</span> <span class="n">reemplazos</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="n">ascii_art</span> <span class="o">=</span> <span class="n">ascii_art</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">original</span><span class="p">,</span> <span class="n">nuevo</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">ascii_art</span>

<span class="c1"># Definir la interfaz gráfica
</span><span class="n">layout</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[</span><span class="n">sg</span><span class="p">.</span><span class="nc">Text</span><span class="p">(</span><span class="sh">"</span><span class="s">Ingrese los nodos separado por espacios y las relaciones en </span><span class="se">\n</span><span class="s"> guiones de posiciones separadas por comas.</span><span class="sh">"</span><span class="p">,</span> <span class="n">justification</span><span class="o">=</span><span class="sh">"</span><span class="s">center</span><span class="sh">"</span><span class="p">)],</span>     
    <span class="p">[</span><span class="n">sg</span><span class="p">.</span><span class="nc">Text</span><span class="p">(</span><span class="sh">"</span><span class="s">Texto: </span><span class="sh">"</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">1</span><span class="p">)),</span> <span class="n">sg</span><span class="p">.</span><span class="nc">InputText</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="sh">"</span><span class="s">texto_largo</span><span class="sh">"</span><span class="p">)],</span>
    <span class="p">[</span><span class="n">sg</span><span class="p">.</span><span class="nc">Text</span><span class="p">(</span><span class="sh">"</span><span class="s">Relaciones:</span><span class="sh">"</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">1</span><span class="p">)),</span> <span class="n">sg</span><span class="p">.</span><span class="nc">InputText</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="sh">"</span><span class="s">relaciones</span><span class="sh">"</span><span class="p">)],</span>
    <span class="p">[</span><span class="n">sg</span><span class="p">.</span><span class="nc">Button</span><span class="p">(</span><span class="sh">"</span><span class="s">Generar Grafo ASCII</span><span class="sh">"</span><span class="p">)],</span>
    <span class="p">[</span><span class="n">sg</span><span class="p">.</span><span class="nc">Multiline</span><span class="p">(</span><span class="sh">""</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="mi">20</span><span class="p">),</span> <span class="n">key</span><span class="o">=</span><span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="n">disabled</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">autoscroll</span><span class="o">=</span><span class="bp">True</span><span class="p">)],</span>
    <span class="p">[</span><span class="n">sg</span><span class="p">.</span><span class="nc">Button</span><span class="p">(</span><span class="sh">"</span><span class="s">Copiar al Portapapeles</span><span class="sh">"</span><span class="p">),</span> <span class="n">sg</span><span class="p">.</span><span class="nc">Button</span><span class="p">(</span><span class="sh">"</span><span class="s">Salir</span><span class="sh">"</span><span class="p">)]</span>
<span class="p">]</span>

<span class="c1"># Crear la ventana
</span><span class="n">window</span> <span class="o">=</span> <span class="n">sg</span><span class="p">.</span><span class="nc">Window</span><span class="p">(</span><span class="sh">"</span><span class="s">Generador de Grafo ASCII</span><span class="sh">"</span><span class="p">,</span> <span class="n">layout</span><span class="p">)</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">event</span><span class="p">,</span> <span class="n">values</span> <span class="o">=</span> <span class="n">window</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">event</span> <span class="o">==</span> <span class="n">sg</span><span class="p">.</span><span class="n">WINDOW_CLOSED</span> <span class="ow">or</span> <span class="n">event</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Salir</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">break</span>
    <span class="k">elif</span> <span class="n">event</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Generar Grafo ASCII</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">texto_largo</span> <span class="o">=</span> <span class="n">values</span><span class="p">[</span><span class="sh">"</span><span class="s">texto_largo</span><span class="sh">"</span><span class="p">]</span>
        <span class="n">relaciones</span> <span class="o">=</span> <span class="n">values</span><span class="p">[</span><span class="sh">"</span><span class="s">relaciones</span><span class="sh">"</span><span class="p">]</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="n">ascii_art</span> <span class="o">=</span> <span class="nf">generar_grafo_y_ascii</span><span class="p">(</span><span class="n">texto_largo</span><span class="p">,</span> <span class="n">relaciones</span><span class="p">)</span>
            <span class="n">window</span><span class="p">[</span><span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">].</span><span class="nf">update</span><span class="p">(</span><span class="n">ascii_art</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">sg</span><span class="p">.</span><span class="nf">popup_error</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Error: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">elif</span> <span class="n">event</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Copiar al Portapapeles</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">output_text</span> <span class="o">=</span> <span class="n">window</span><span class="p">[</span><span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">].</span><span class="nf">get</span><span class="p">()</span>
        <span class="n">pyperclip</span><span class="p">.</span><span class="nf">copy</span><span class="p">(</span><span class="n">output_text</span><span class="p">)</span>

<span class="n">window</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>



</code></pre></div></div> <p><strong>Cómo Utilizar la Herramienta:</strong></p> <ol> <li>Ingresa los nodos separados por espacios, por ejemplo: “Titulo Subtitulo_A Subtitulo_B Derivado_1.”</li> <li>Define las relaciones utilizando el formato “posición-nodo” separadas por comas, por ejemplo: “1-2, 1-3, 2-4.”</li> <li>Haz clic en “Generar Grafo ASCII.”</li> </ol> <p>El arte ASCII generado se mostrará en el campo de salida de la interfaz y puede ser copiado al portapapeles para su uso inmediato.</p> <p><strong>Ejemplo:</strong></p> <p><strong>Texto Ingresado:</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Título Subtitulo_A Subtitulo_B Derivado_1 D_2
</code></pre></div></div> <p><strong>Relaciones Ingresadas:</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1-2, 1-3, 3-4, 3-5 
</code></pre></div></div> <p><strong>Resultado del Grafo ASCII:</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Título
       │
┌──────┴──────┐
│               │
Subtitulo_A  Subtitulo_B
                │
         ┌─────┴─────┐
         │           │
   Derivado_1       D_2
</code></pre></div></div> <p><strong>Conclusiones:</strong></p> <p>Este proyecto destaca la eficacia de ChatGPT al traducir indicaciones específicas en soluciones de código prácticas. La herramienta desarrollada, con base en bibliotecas como networkx y PySimpleGUI en Python, resuelve de manera efectiva la representación gráfica de datos basada en texto.</p> <p>La capacidad de ChatGPT para entender y aplicar indicaciones precisas ha agilizado la generación de código, ofreciendo una solución puntual. Esta colaboración directa entre la inteligencia artificial y la acción práctica subraya la utilidad de esta tecnología para abordar desafíos específicos de manera rápida y directa.</p>]]></content><author><name></name></author><category term="General"/><category term="chatgpt"/><category term="automatizacion"/><category term="python"/><category term="programacion"/><summary type="html"><![CDATA[Una prueba a la capacidad de ChatGPT para entender y aplicar indicaciones en la generación de código]]></summary></entry><entry><title type="html">Scoop - Optimizando la Instalación de Software en Windows</title><link href="https://uribecesar.github.io/blog/2023/scoop/" rel="alternate" type="text/html" title="Scoop - Optimizando la Instalación de Software en Windows"/><published>2023-05-15T21:01:00+00:00</published><updated>2023-05-15T21:01:00+00:00</updated><id>https://uribecesar.github.io/blog/2023/scoop</id><content type="html" xml:base="https://uribecesar.github.io/blog/2023/scoop/"><![CDATA[<p><a href="https://scoop.sh/"><img src="https://img.shields.io/badge/Scoop-Installed-blue?style=flat-square&amp;logo=windows&amp;logoColor=white" alt="Scoop"/></a> <a href="https://aka.ms/terminal"><img src="https://img.shields.io/badge/Windows%20Terminal-Installed-green?style=flat-square&amp;logo=windows&amp;logoColor=white" alt="Windows Terminal"/></a></p> <h2 id="1-introduccion">1. Introduccion</h2> <p>Nos situamos en un escenario donde la eficiencia del proceso se convierte en un imperativo. La necesidad de abordar de manera integral y sistemática la instalación de programas en este sistema operativo ha llevado al surgimiento de soluciones dedicadas a Windows pero inspiradas en otros sistemas operativos, entre las cuales destaca el gestor de paquetes Scoop.</p> <p>En este contexto, se torna esencial comprender las complejidades inherentes a la instalación de software en sistemas Windows. La diversidad de aplicaciones, sus interrelaciones y la necesidad de mantener la integridad del sistema exigen una aproximación meticulosa y eficiente. La problemática que enfrentamos subraya la importancia de explorar soluciones que no solo aborden los desafíos prácticos, sino que también estén fundamentadas en principios teóricos sólidos.</p> <p>La instalación tradicional de software en Windows, a menudo guiada por interfaces gráficas, se ha enfrentado a limitaciones en términos de consistencia y automatización. En este escenario, la presentación de Scoop como un gestor de paquetes adquiere relevancia, prometiendo un enfoque novedoso y eficiente para la instalación, actualización y desinstalación de software.</p> <p>Este artículo explorará el aplicación CLI de Scoop, desde sus fundamentos hasta sus aplicaciones prácticas en la optimización de la instalación de software en el ecosistema Windows.</p> <h2 id="2-un-paradigma-de-gestión-de-paquetes">2. Un Paradigma de Gestión de Paquetes</h2> <p>A diferencia de las soluciones tradicionales que se apoyan en interfaces gráficas, Scoop adopta un enfoque basado en la línea de comandos, proporcionando paradigma ampliamente empleado en sistemas operativos Linux y tipo UNIX en la instalación de software.</p> <p>Scoop se erige sobre el principio de la eficiencia a través de la simplicidad. La interfaz de línea de comandos, permite a los usuarios gestionar la instalación de software con precisión y agilidad. Un ejemplo palpable es la instalación de Scoop en sí mismo a través de PowerShell:</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Set-ExecutionPolicy</span><span class="w"> </span><span class="nx">RemoteSigned</span><span class="w"> </span><span class="nt">-Scope</span><span class="w"> </span><span class="nx">CurrentUser</span><span class="w"> </span><span class="c">#opcional</span><span class="w">
 </span><span class="n">irm</span><span class="w"> </span><span class="nx">get.scoop.sh</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">iex</span><span class="w">
</span></code></pre></div></div> <p>Este comando descarga e instala Scoop de manera automatizada, en el caso de problemas con la instalación la pagina web oficial será de ayuda - (Scoop.sh.)[https://scoop.sh/]</p> <h2 id="3-comparativa-con-soluciones-convencionales">3. Comparativa con Soluciones Convencionales</h2> <p>Mientras que las interfaces gráficas pueden ser propensas a la ambigüedad y a menudo carecen de automatización, Scoop ofrece un control preciso y una ejecución coherente. Este contraste se ilustra de manera práctica al instalar un programa, por ejemplo, Git, mediante Scoop:</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scoop</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nx">git</span><span class="w">
</span></code></pre></div></div> <p>Esta línea de comandos no solo simplifica el proceso, sino que también garantiza la coherencia en la instalación de programas, abordando de manera efectiva los desafíos asociados con las variables de entorno y usuarios en el sistema operativo Windows. Además, de manera similar, Scoop se posiciona como una alternativa valiosa a otros administradores de paquetes para Windows, como Homebrew o Chocolatey, extendiendo así soluciones eficaces en el ámbito de la gestión de software en este sistema operativo.</p> <h2 id="4-modularización-y-organización-lógica">4. Modularización y Organización Lógica</h2> <p>La eficacia de Scoop se ancla en principios teóricos sólidos. La modularización, una piedra angular en ingeniería de software, se refleja en la organización de programas en “buckets” o conjuntos lógicos. Este enfoque, respaldado por la teoría de grafos para gestionar dependencias, promueve una instalación sistemática y libre de conflictos.</p> <p>La implementación de estos conceptos se traduce en una gestión eficiente y coherente del software, un aspecto crucial en entornos profesionales y de desarrollo.</p> <p>En este sentido, la adopción de Scoop representa un avance significativo en la optimización de la instalación de software en sistemas Windows, fusionando principios teóricos con soluciones prácticas. En las siguientes secciones, exploraremos las aplicaciones prácticas de Scoop y proporcionaremos guías detalladas para su implementación.</p> <h2 id="5--automatización-en-entornos-de-desarrollo">5. Automatización en Entornos de Desarrollo</h2> <p>La capacidad de automatizar la instalación y actualización de dependencias simplifica los flujos de trabajo, permitiendo a los desarrolladores concentrarse en tareas más críticas. Este nivel de automatización no solo mejora la eficiencia, sino que también reduce la posibilidad de errores humanos.</p> <p>Ejemplo de instalación y actualización automática de dependencias en un entorno de desarrollo:</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scoop</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nx">nodejs</span><span class="w">
</span><span class="n">scoop</span><span class="w"> </span><span class="nx">update</span><span class="w"> 
</span></code></pre></div></div> <h2 id="6-directrices-procedimentales-para-actualización-y-desinstalación">6. Directrices Procedimentales para Actualización y Desinstalación</h2> <p>La continuidad en el uso de Scoop se asegura mediante la actualización regular de los paquetes instalados. La siguiente instrucción en PowerShell actualiza todos los paquetes a sus versiones más recientes:</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Copy</span><span class="w"> </span><span class="nx">code</span><span class="w">
</span><span class="n">scoop</span><span class="w"> </span><span class="nx">update</span><span class="w"> 
</span></code></pre></div></div> <p>Este comando permite Scoop mantener el software al día con un esfuerzo mínimo por parte del usuario.</p> <p>Asimismo, cuando la necesidad de desinstalar un paquete surge, Scoop proporciona una solución simple. El siguiente comando elimina el paquete especificado, por ejemplo, Git:</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Copy</span><span class="w"> </span><span class="nx">code</span><span class="w">
</span><span class="n">scoop</span><span class="w"> </span><span class="nx">uninstall</span><span class="w"> </span><span class="nx">git</span><span class="w">
</span></code></pre></div></div> <h2 id="7-perspectivas">7. Perspectivas</h2> <p>Su flexibilidad y capacidad para adaptarse a diversas necesidades sugieren posibles aplicaciones en ámbitos profesionales y académicos.</p> <p>En entornos de desarrollo, Scoop puede convertirse en un aliado indispensable para mantener la coherencia en las configuraciones y simplificar las tareas rutinarias. En el ámbito académico, su adopción podría ofrecer un caso de estudio relevante para futuras investigaciones en la gestión eficiente de software.</p> <p>Para concluir, la optimización de la instalación de software en Windows a través de Scoop en opinión del autor:</p> <blockquote> <p>Para aquellos que alguna vez fuimos inquebrantables seguidores de la terminal en sistemas operativos GNU/Linux y, por alguna razón, nos encontramos trabajando en plataformas Windows; Scoop, sin duda, emerge como una alternativa a tener en cuenta.</p> </blockquote>]]></content><author><name></name></author><category term="General"/><category term="windows"/><category term="terminal"/><category term="automatizacion"/><category term="CLI"/><summary type="html"><![CDATA[Instalación de software en Windows a través de CLI]]></summary></entry></feed>